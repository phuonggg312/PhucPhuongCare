@page "/doctor/{DoctorId:int}"
@attribute [Authorize]

@using System.Security.Claims
@using PhucPhuongCare.CoreBusiness.Models
@using PhucPhuongCare.UseCases.AppointmentsUseCases
@using PhucPhuongCare.UseCases.DoctorsUseCases
@using PhucPhuongCare.UseCases.TimeSlotsUseCases
@using PhucPhuongCare.UseCases.SchedulesUseCases
@using Radzen.Blazor

@inject IViewDoctorByIdUseCase ViewDoctorByIdUseCase
@inject IViewAvailableTimeSlotsUseCase ViewAvailableTimeSlotsUseCase
@inject IBookAppointmentUseCase BookAppointmentUseCase
@inject IGenerateTimeSlotsUseCase GenerateTimeSlotsUseCase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Đặt lịch với @doctor?.FullName</PageTitle>

@if (doctor == null)
{
    <p><em>Đang tải thông tin bác sĩ...</em></p>
}
else
{
    <h3>Thông tin Bác sĩ: @doctor.FullName</h3>
    <hr />
    <div>
        <p><strong>Bằng cấp:</strong> @doctor.Degree</p>
        <p><strong>Chuyên khoa:</strong> @doctor.Specialty?.Name</p>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <h4>1. Chọn ngày khám</h4>
            <RadzenDatePicker @bind-Value="selectedDate" Inline="true" Change="DateChanged" Min="@DateTime.Today" />
        </div>
        <div class="col-md-8">
            <h4>2. Chọn khung giờ còn trống</h4>
            @if (isLoadingSlots)
            {
                <p><em>Đang tìm khung giờ...</em></p>
            }
            else if (availableSlots.Any())
            {
                <div class="d-flex flex-wrap">
                    @foreach (var slot in availableSlots)
                    {
                        var btnClass = (selectedTimeSlotId == slot.Id) ? "btn btn-primary m-1" : "btn btn-outline-primary m-1";
                        <button class="@btnClass" style="width: 120px;" @onclick="() => SelectTimeSlot(slot.Id)">
                            @slot.SlotDateTime.ToString("HH:mm")
                        </button>
                    }
                </div>
            }
            else
            {
                <p class="text-muted">Không có khung giờ trống cho ngày này. Vui lòng chọn ngày khác.</p>
            }

            @if (selectedTimeSlotId.HasValue)
            {
                <div class="mt-4 p-3 border rounded">
                    <AuthorizeView>
                        <Authorized>
                            <h4>3. Xác nhận thông tin</h4>
                            <p>Bạn đang đặt lịch với tài khoản: <strong>@context.User.Identity?.Name</strong></p>

                            <div class="mb-3">
                                <label for="reason" class="form-label">Lý do khám bệnh (không bắt buộc):</label>
                                <textarea id="reason" class="form-control" rows="3" @bind="reasonForVisit"></textarea>
                            </div>
                            <button class="btn btn-success w-100" @onclick="HandleConfirmBooking" disabled="@isBooking">
                                @if (isBooking)
                                {
                                    <span class="spinner-border spinner-border-sm"></span>
                                    <span> Đang xử lý...</span>
                                }
                                else
                                {
                                    <span>Xác nhận Đặt lịch</span>
                                }
                            </button>
                        </Authorized>
                        <NotAuthorized>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int DoctorId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private Doctor? doctor;
    private DateTime selectedDate = DateTime.Today;
    private List<TimeSlot> availableSlots = new();
    private bool isLoadingSlots = false;
    private int? selectedTimeSlotId = null;
    private string reasonForVisit = string.Empty;
    private bool isBooking = false;

    protected override async Task OnInitializedAsync()
    {
        doctor = await ViewDoctorByIdUseCase.ExecuteAsync(DoctorId);
        await DateChanged(DateTime.Today);
    }

    private async Task DateChanged(DateTime? newDate)
    {
        if (newDate.HasValue)
        {
            isLoadingSlots = true;
            StateHasChanged();

            selectedDate = newDate.Value;
            selectedTimeSlotId = null;

            await GenerateTimeSlotsUseCase.ExecuteAsync(DoctorId, selectedDate, selectedDate.AddDays(30));
            await LoadAvailableSlots();

            isLoadingSlots = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableSlots()
    {
        availableSlots.Clear();
        var result = await ViewAvailableTimeSlotsUseCase.ExecuteAsync(DoctorId, selectedDate);
        availableSlots.AddRange(result);
    }

    private void SelectTimeSlot(int timeSlotId)
    {
        if (selectedTimeSlotId == timeSlotId) selectedTimeSlotId = null;
        else selectedTimeSlotId = timeSlotId;
    }

    private async Task HandleConfirmBooking()
    {
        if (!selectedTimeSlotId.HasValue || authenticationStateTask == null) return;
        isBooking = true;

        var user = (await authenticationStateTask).User;
        var patientId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(patientId))
        {
            isBooking = false;
            return;
        }

        await BookAppointmentUseCase.ExecuteAsync(
            DoctorId,
            selectedTimeSlotId.Value,
            patientId,
            reasonForVisit
        );

        isBooking = false;
        NavigationManager.NavigateTo("/my-appointments");
    }
}